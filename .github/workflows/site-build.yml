name: 사이트 빌드 및 배포

on:
  schedule:
    - cron: '5 15 * * *'  # 매일 UTC 15:05 (한국시간 00:05)
  workflow_dispatch:  # 수동 실행 가능

permissions:
  contents: write  # 저장소에 쓰기 권한 필요
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      
    - name: Python 설정
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: 의존성 설치
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: 사이트 빌드
      run: |
        echo "=== 파일 존재 확인 ==="
        ls -la *.py
        echo "=== 1. 버스 시간표 HTML 생성 ==="
        python app.py
        echo "=== 2. 터미널 허브 페이지 생성 ==="
        if [ -f "hub.py" ]; then
          echo "hub.py 파일 존재함"
          python hub.py
        else
          echo "❌ hub.py 파일이 없습니다"
          exit 1
        fi
        echo "=== 3. Sitemap과 RSS 생성 ==="
        python sitemap.py
        echo "=== 4. 빌드 완료 ==="
        mkdir -p outputs
        echo "=== outputs 폴더 생성 후 내용 ==="
        ls -la outputs/ || echo "outputs 폴더 비어있음"

    - name: 터미널 페이지 디버깅 및 검증
      run: |
        echo "=== 1. hub.py 실행 후 outputs 확인 ==="
        ls -la outputs/ 2>/dev/null || echo "outputs 폴더 없음"
        
        echo "=== 2. 터미널 페이지 존재 여부 확인 ==="
        if ls outputs/*터미널*.html 1> /dev/null 2>&1; then
          echo "✅ 터미널 페이지 발견:"
          ls -la outputs/*터미널*.html
        else
          echo "❌ 터미널 페이지가 outputs에 없음!"
          echo "=== hub.py 재실행 및 로그 확인 ==="
          python -c "import subprocess; result = subprocess.run(['python', 'hub.py'], capture_output=True, text=True); print('STDOUT:', result.stdout); print('STDERR:', result.stderr); print('Return code:', result.returncode)"
          echo "=== 전체 시스템에서 터미널 파일 찾기 ==="
          find . -name "*터미널*" -type f 2>/dev/null || echo "시스템에 터미널 파일 없음"
          exit 1
        fi
        
    - name: 파일을 root로 복사
      run: |
        echo "=== outputs 폴더 전체 내용 ==="
        ls -la outputs/ 2>/dev/null || echo "outputs 폴더 없음"
        
        # 기본 파일들 복사
        cp outputs/*.json . 2>/dev/null || true
        cp outputs/*.xml . 2>/dev/null || true
        cp outputs/*.txt . 2>/dev/null || true
        cp outputs/*-에서-*-가는-시외버스-시간표.html . 2>/dev/null || true
        
        # 터미널 페이지 복사 (에러 발생시 중단)
        echo "=== 터미널 페이지 복사 시작 ==="
        cp outputs/*터미널*.html . || {
          echo "❌ 터미널 페이지 복사 실패!"
          ls -la outputs/
          exit 1
        }
        
        # 터미널 페이지에 강제 업데이트 타임스탬프 추가
        echo "=== 터미널 페이지 강제 업데이트 ==="
        for file in *터미널*.html; do
          if [ -f "$file" ]; then
            echo "<!-- Force update: $(date '+%Y-%m-%d %H:%M:%S %Z') -->" >> "$file"
            echo "✅ $file 강제 업데이트 완료"
          fi
        done
        
        # index.html이 복사되었다면 삭제
        rm -f index.html 2>/dev/null || true
        
        echo "=== 최종 복사된 파일들 확인 ===" 
        echo "--- 노선 시간표 파일들 ---"
        ls -1 *-에서-*-가는-시외버스-시간표.html 2>/dev/null | wc -l | xargs echo "노선 페이지:"
        echo "--- 터미널 허브 파일들 ---"
        ls -1 *터미널*.html 2>/dev/null | wc -l | xargs echo "터미널 페이지:"
        echo "--- 기타 파일들 ---"
        ls -1 *.json *.xml *.txt 2>/dev/null | wc -l | xargs echo "기타 파일:"
        
    - name: 빌드 결과 커밋 및 푸시
      run: |
        # Git 설정
        git config --local user.email "hyunwoohappy@gmail.com"
        git config --local user.name "Hyunwoo0815"
        
        # 현재 브랜치 확인
        echo "=== 현재 브랜치 정보 ==="
        git branch -a
        git status
        
        # 모든 생성된 HTML 파일들을 add
        echo "=== 커밋할 파일들 확인 ==="
        echo "--- 노선 시간표 파일들 ---"
        ls -1 *-에서-*-가는-시외버스-시간표.html 2>/dev/null | wc -l | xargs echo "노선 페이지 수:"
        echo "--- 터미널 허브 파일들 ---"  
        ls -1 *터미널*.html 2>/dev/null | wc -l | xargs echo "터미널 페이지 수:"
        
        # 파일들을 강제로 add
        echo "=== 파일 추가 중 ==="
        git add *-에서-*-가는-시외버스-시간표.html 2>/dev/null || echo "노선 파일 없음"
        git add *터미널*.html 2>/dev/null || echo "터미널 파일 없음"  
        git add *.json *.xml *.txt 2>/dev/null || echo "기타 파일 없음"
        
        # 강제로 타임스탬프 파일 생성 (변경사항이 없어도 커밋하기 위해)
        echo "Last build: $(date '+%Y-%m-%d %H:%M:%S %Z')" > .build-timestamp
        echo "Build trigger: $([ '${{ github.event_name }}' = 'workflow_dispatch' ] && echo 'manual' || echo 'scheduled')" >> .build-timestamp
        git add .build-timestamp
        
        echo "=== git status (after add) ==="
        git status
        echo "=== staged files ==="
        git diff --staged --name-only
        
        # 커밋 및 푸시 (항상 실행)
        echo "=== 커밋 진행 ==="
        git commit -m "🚀 Daily site update [$(date '+%Y-%m-%d %H:%M:%S')] - 📊 Generated files: Route pages: $(ls -1 *-에서-*-가는-시외버스-시간표.html 2>/dev/null | wc -l), Terminal pages: $(ls -1 *터미널*.html 2>/dev/null | wc -l), Other files: $(ls -1 *.json *.xml *.txt 2>/dev/null | wc -l) - 🕐 Auto-triggered at KST 00:05"
        
        echo "=== 푸시 진행 ==="
        git push origin main --verbose
        
        echo "=== 푸시 완료 확인 ==="
        git log --oneline -1
